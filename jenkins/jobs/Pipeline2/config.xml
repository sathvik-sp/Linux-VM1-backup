<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1468.vcf4f5ee92395">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2218.v56d0cda_37c72">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.40.0">
      <projectUrl>git@github.com:sathvik-sp/JenkinsPipelineLab.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/2 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3993.v3e20a_37282f8">
    <script>pipeline {
    agent {label &apos;java&apos;} 
    stages {
        stage(&quot;Stage 1: SCM Checkout node1&quot;) {
            steps {
                git branch: &apos;main&apos;, 
                credentialsId: &apos;host1&apos;, 
                url: &apos;git@github.com:sathvik-sp/JenkinsPipelineLab.git&apos;
            }
        }
    
    stage(&apos;Stage 2: Install epel-release and Ansible&apos;) {
            steps {
                script {
                    sh &apos;&apos;&apos;
                    sudo dnf -y update
                    sudo dnf -y install epel-release
                    sudo dnf -y install ansible
                    ansible --version
                    &apos;&apos;&apos;
                }
            }
        }
    
    stage(&apos;Stage2: Capture IP Address and Edit Inventory File&apos;) {
            steps {
                script {
                    def ipAddress = sh(script: &quot;ip a show eth0 | grep inet | grep -v inet6 | awk &apos;{print \$2}&apos; | cut -d&apos;/&apos; -f1 | head -n 1&quot;, returnStdout: true).trim()
                    def inventoryFile = &apos;/etc/ansible/hosts&apos;
                    def existingIpCheck = sh(script: &quot;grep -q &apos;${ipAddress}&apos; ${inventoryFile} &amp;&amp; echo &apos;found&apos; || echo &apos;not_found&apos;&quot;, returnStdout: true).trim()

                    if (existingIpCheck == &apos;not_found&apos;) {
                        sh &quot;&quot;&quot;
                        echo &apos;[Controller]&apos; | sudo tee -a ${inventoryFile}
                        echo &apos;${ipAddress}&apos; | sudo tee -a ${inventoryFile}
                        &quot;&quot;&quot;
                        sh &apos;cat /etc/ansible/hosts&apos;
                    } else {
                        echo &quot;IP address ${ipAddress} already exists in the inventory. Skipping update.&quot;
                    }
                }
            }
            
        }
        
        stage(&apos;Stage2: Install Terraform using Ansible-Playbook&apos;) {
            steps {
                script {
                    sh &apos;ansible-playbook ./ansibleplaybooks/install_teraform.yaml&apos;
                }
            }
        }
        
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>